pipeline{
 agent none
 stages{
 
    stage('Checkout the deprovioning Repo') {
      steps {
        script {
        echo "Checkout the deprovioning Repo"
        node{
             checkout([
            $class: 'GitSCM',
            branches: [[name: '*/I123456-test']],
            userRemoteConfigs: [
                [ url: 'https://github.com/hamdymoussa/example-voting-app.git',
                  credentialsId: 'github-hamdy-secret-token-2'
                ]
            ],
            doGenerateSubmoduleConfigurations: false,
            extensions: [
                [$class: 'CleanBeforeCheckout'],
                [$class: 'RelativeTargetDirectory', relativeTargetDir: 'worker']
            ]
         ])
        }
      } 
    }
 }
 stage('build'){
 agent{
 docker{
 image 'maven:3.6.1-jdk-8-slim'
 args '-v $HOME/.m2:/root/.m2'
 }
 }
 steps{
 echo 'building worker app'
 dir('worker'){
 sh 'mvn compile'
 }
 }
 }
 
 stage('test'){
 agent{
docker{
 image 'maven:3.6.1-jdk-8-slim'
 args '-v $HOME/.m2:/root/.m2'
 }
 }
 steps{
 echo 'running unit tests on worker app'
 dir('worker'){
 sh 'mvn clean test'
 }
 }
 }


 stage('package'){
 agent{
 docker{
 image 'maven:3.6.1-jdk-8-slim'
 args '-v $HOME/.m2:/root/.m2'
 }
 }
 steps{
 echo 'packaging worker app into a jarfile'
 dir('worker'){
 sh 'mvn package -DskipTests'
 archiveArtifacts artifacts: '**/target/*.jar', fingerprint:
true
 }
 }
 }
 stage('docker-package'){
 agent any
 steps{
 echo 'Packaging worker app with docker'
 script{
 docker.withRegistry('https://index.docker.io/v1/','dockerlogin') {
 def workerImage = docker.build("hamdymoussa/worker:v${env.BUILD_ID}", "./worker")
 workerImage.push()
// workerImage.push("${env.BRANCH_NAME}") 
 workerImage.push("latest")
                                                                  }
       }
      }
                       }
 stage('docker-compose-test'){
 agent any
 steps{
 echo 'Packaging worker app with docker'
 sh 'docker-compose version'
      }
                       }
 }
 post{
 always{
 echo 'the job is complete'
 }
 }
}
